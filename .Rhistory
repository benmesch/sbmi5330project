#before passing into the enrichment functions, need to translate proprietary (platform) ids into Entrez gene ids
platform.ids <- names(gene.list.3.1)
#platform.ids
platform.ids
gset@featureData@data[,c("ID","Gene.ID")]
#create gene list
gene.list.3.1 <- 10^g3.means / 10^g1.means #raw values are all log10 transormed. undo that.
#gene.list.3.1 <- sort(gene.list.3.1, decreasing=TRUE)
gene.list.3.1 <- log(gene.list.3.1, base=2)
#before passing into the enrichment functions, need to translate proprietary (platform) ids into Entrez gene ids
platform.ids <- names(gene.list.3.1)
#platform.ids
platform.ids
gset@featureData@data[,c("ID","Gene.ID")]
#before passing into the enrichment functions, need to translate proprietary (platform) ids into Entrez gene ids
platform.ids <- names(gene.list.3.1)
#platform.ids
platform.ids[1:30]
gset@featureData@data[,c("ID","Gene.ID")]
#before passing into the enrichment functions, need to translate proprietary (platform) ids into Entrez gene ids
platform.ids <- names(gene.list.3.1)
#platform.ids
platform.ids[1:30]
gset@featureData@data[,c("ID","Gene.ID")]
which(length(gset@featureData@data[,c("ID","Gene.ID")])>0)
#before passing into the enrichment functions, need to translate proprietary (platform) ids into Entrez gene ids
platform.ids <- names(gene.list.3.1)
#platform.ids
#platform.ids[1:30]
#gset@featureData@data[,c("ID","Gene.ID")]
which(length(gset@featureData@data[,c("ID","Gene.ID")])>0)
#before passing into the enrichment functions, need to translate proprietary (platform) ids into Entrez gene ids
platform.ids <- names(gene.list.3.1)
#platform.ids
#platform.ids[1:30]
#gset@featureData@data[,c("ID","Gene.ID")]
which(gset@featureData@data[,c("ID","Gene.ID")])0)
#before passing into the enrichment functions, need to translate proprietary (platform) ids into Entrez gene ids
platform.ids <- names(gene.list.3.1)
#platform.ids
#platform.ids[1:30]
#gset@featureData@data[,c("ID","Gene.ID")]
which(gset@featureData@data[,c("ID","Gene.ID")])>0)
#before passing into the enrichment functions, need to translate proprietary (platform) ids into Entrez gene ids
platform.ids <- names(gene.list.3.1)
#platform.ids
#platform.ids[1:30]
#gset@featureData@data[,c("ID","Gene.ID")]
which(gset@featureData@data[,c("ID","Gene.ID")]>0)
#before passing into the enrichment functions, need to translate proprietary (platform) ids into Entrez gene ids
platform.ids <- names(gene.list.3.1)
#platform.ids
#platform.ids[1:30]
#gset@featureData@data[,c("ID","Gene.ID")]
which(gset@featureData@data[,c("ID","Gene.ID")] != "")
#before passing into the enrichment functions, need to translate proprietary (platform) ids into Entrez gene ids
platform.ids <- names(gene.list.3.1)
#platform.ids
#platform.ids[1:30]
#gset@featureData@data[,c("ID","Gene.ID")]
which(apply(gset@featureData@data[,c("ID","Gene.ID")],1,length) > 0)
#before passing into the enrichment functions, need to translate proprietary (platform) ids into Entrez gene ids
platform.ids <- names(gene.list.3.1)
#platform.ids
#platform.ids[1:30]
#gset@featureData@data[,c("ID","Gene.ID")]
which(apply(gset@featureData@data[,c("ID","Gene.ID")],2,length) > 0)
#before passing into the enrichment functions, need to translate proprietary (platform) ids into Entrez gene ids
platform.ids <- names(gene.list.3.1)
#platform.ids
#platform.ids[1:30]
#gset@featureData@data[,c("ID","Gene.ID")]
which(apply(gset@featureData@data[,c("ID","Gene.ID")],0,length) > 0)
#before passing into the enrichment functions, need to translate proprietary (platform) ids into Entrez gene ids
platform.ids <- names(gene.list.3.1)
#platform.ids
#platform.ids[1:30]
#gset@featureData@data[,c("ID","Gene.ID")]
which(apply(gset@featureData@data[,c("ID","Gene.ID")],1,length) > 0)
#before passing into the enrichment functions, need to translate proprietary (platform) ids into Entrez gene ids
platform.ids <- names(gene.list.3.1)
#platform.ids
#platform.ids[1:30]
gset@featureData@data[,c("ID","Gene.ID")]
which(apply(gset@featureData@data[,c("ID","Gene.ID")],1,length) > 0)
#before passing into the enrichment functions, need to translate proprietary (platform) ids into Entrez gene ids
platform.ids <- names(gene.list.3.1)
#platform.ids
#platform.ids[1:30]
gset@featureData@data[,c("ID","Gene.ID")]
which(apply(gset@featureData@data[,c("ID","Gene.ID")],1,length) > 0)[1:30]
#before passing into the enrichment functions, need to translate proprietary (platform) ids into Entrez gene ids
platform.ids <- names(gene.list.3.1)
#platform.ids
#platform.ids[1:30]
gset@featureData@data[,c("ID","Gene.ID")]
which(apply(gset@featureData@data[,c("Gene.ID")],1,length) > 0)[1:30]
#before passing into the enrichment functions, need to translate proprietary (platform) ids into Entrez gene ids
platform.ids <- names(gene.list.3.1)
#platform.ids
#platform.ids[1:30]
gset@featureData@data[,c("ID","Gene.ID")]
which(apply(gset@featureData@data[,"Gene.ID"],1,length) > 0)[1:30]
#before passing into the enrichment functions, need to translate proprietary (platform) ids into Entrez gene ids
platform.ids <- names(gene.list.3.1)
#platform.ids
#platform.ids[1:30]
gset@featureData@data[,c("ID","Gene.ID")]
gset@featureData@data[,Gene.ID"]
which(apply(gset@featureData@data[,"Gene.ID"],1,length) > 0)[1:30]
#before passing into the enrichment functions, need to translate proprietary (platform) ids into Entrez gene ids
platform.ids <- names(gene.list.3.1)
#platform.ids
#platform.ids[1:30]
gset@featureData@data[,c("ID","Gene.ID")]
gset@featureData@data[,"Gene.ID"]
which(apply(gset@featureData@data[,"Gene.ID"],1,length) > 0)[1:30]
#before passing into the enrichment functions, need to translate proprietary (platform) ids into Entrez gene ids
platform.ids <- names(gene.list.3.1)
#platform.ids
#platform.ids[1:30]
gset@featureData@data[,c("ID","Gene.ID")]
gset@featureData@data[,"Gene.ID"]<>""
#before passing into the enrichment functions, need to translate proprietary (platform) ids into Entrez gene ids
platform.ids <- names(gene.list.3.1)
#platform.ids
#platform.ids[1:30]
gset@featureData@data[,c("ID","Gene.ID")]
gset@featureData@data[,"Gene.ID"] != ""
which(apply(gset@featureData@data[,"Gene.ID"],1,length) > 0)[1:30]
#before passing into the enrichment functions, need to translate proprietary (platform) ids into Entrez gene ids
platform.ids <- names(gene.list.3.1)
#platform.ids
#platform.ids[1:30]
gset@featureData@data[,c("ID","Gene.ID")][gset@featureData@data[,"Gene.ID"] != ""]
#before passing into the enrichment functions, need to translate proprietary (platform) ids into Entrez gene ids
platform.ids <- names(gene.list.3.1)
#platform.ids
#platform.ids[1:30]
gset@featureData@data[,c("ID","Gene.ID")][gset@featureData@data[,"Gene.ID"] != "",]
gset@featureData@data[,"Gene.ID"] != ""
which(apply(gset@featureData@data[,"Gene.ID"],1,length) > 0)[1:30]
#before passing into the enrichment functions, need to translate proprietary (platform) ids into Entrez gene ids
platform.ids <- names(gene.list.3.1)
#platform.ids
#platform.ids[1:30]
gset@featureData@data[,c("ID","Gene.ID")][gset@featureData@data[,"Gene.ID"] != "",]
test.gene.list <- gene.list.3.1[gset@featureData@data[,"Gene.ID"] != "",]
#before passing into the enrichment functions, need to translate proprietary (platform) ids into Entrez gene ids
platform.ids <- names(gene.list.3.1)
#platform.ids
#platform.ids[1:30]
gset@featureData@data[,c("ID","Gene.ID")][gset@featureData@data[,"Gene.ID"] != "",]
test.gene.list <- gene.list.3.1[gset@featureData@data[,"Gene.ID"] != ""]
test.gene.list
gset@featureData@data[,"Gene.ID"] != ""
which(apply(gset@featureData@data[,"Gene.ID"],1,length) > 0)[1:30]
#before passing into the enrichment functions, need to translate proprietary (platform) ids into Entrez gene ids
platform.ids <- names(gene.list.3.1)
#platform.ids
#platform.ids[1:30]
test.gene.list <- gene.list.3.1[gset@featureData@data[,"Gene.ID"] != ""]
test.gene.list
test.gene.names <- gset@featureData@data[,c("ID","Gene.ID")][gset@featureData@data[,"Gene.ID"] != "",]
test.gene.names
gset@featureData@data[,"Gene.ID"] != ""
which(apply(gset@featureData@data[,"Gene.ID"],1,length) > 0)[1:30]
#before passing into the enrichment functions, need to translate proprietary (platform) ids into Entrez gene ids
platform.ids <- names(gene.list.3.1)
#platform.ids
#platform.ids[1:30]
test.gene.list <- gene.list.3.1[gset@featureData@data[,"Gene.ID"] != ""]
test.gene.list[1:10]
test.gene.names <- gset@featureData@data[,c("ID","Gene.ID")][gset@featureData@data[,"Gene.ID"] != "",]
test.gene.names[1:10]
#before passing into the enrichment functions, need to translate proprietary (platform) ids into Entrez gene ids
platform.ids <- names(gene.list.3.1)
#platform.ids
#platform.ids[1:30]
test.gene.list <- gene.list.3.1[gset@featureData@data[,"Gene.ID"] != ""]
test.gene.list[1:10]
test.gene.names <- gset@featureData@data[,c("ID","Gene.ID")][gset@featureData@data[,"Gene.ID"] != "",]
test.gene.names[1:10,]
gset@featureData@data[,"Gene.ID"] != ""
which(apply(gset@featureData@data[,"Gene.ID"],1,length) > 0)[1:30]
#before passing into the enrichment functions, need to translate proprietary (platform) ids into Entrez gene ids
platform.ids <- names(gene.list.3.1)
#platform.ids
#platform.ids[1:30]
test.gene.list <- gene.list.3.1[gset@featureData@data[,"Gene.ID"] != ""]
test.gene.list[1:10]
test.gene.names <- gset@featureData@data[,c("ID","Gene.ID")][gset@featureData@data[,"Gene.ID"] != "",]
test.gene.names[1:10,]
gset@featureData@data[,"Gene.ID"] != ""
which(apply(gset@featureData@data[,"Gene.ID"],1,length) > 0)[1:30]
#before passing into the enrichment functions, need to translate proprietary (platform) ids into Entrez gene ids
platform.ids <- names(gene.list.3.1)
#platform.ids
#platform.ids[1:30]
#test.gene.list <- gene.list.3.1[gset@featureData@data[,"Gene.ID"] != ""]
#test.gene.list[1:10]
test.gene.names <- gset@featureData@data[,c("ID","Gene.ID")][gset@featureData@data[,"Gene.ID"] != "",]
test.gene.names[1:10,]
gset@featureData@data[,"Gene.ID"] != ""
which(apply(gset@featureData@data[,"Gene.ID"],1,length) > 0)[1:30]
#before passing into the enrichment functions, need to translate proprietary (platform) ids into Entrez gene ids
platform.ids <- names(gene.list.3.1)
#platform.ids
#platform.ids[1:30]
test.gene.list <- gene.list.3.1[gset@featureData@data[,"Gene.ID"] != ""]
test.gene.list[1:10]
test.gene.names <- gset@featureData@data[,c("ID","Gene.ID")][gset@featureData@data[,"Gene.ID"] != "",]
test.gene.names[1:10,]
gset@featureData@data[,"Gene.ID"] != ""
which(apply(gset@featureData@data[,"Gene.ID"],1,length) > 0)[1:30]
#before passing into the enrichment functions, need to translate proprietary (platform) ids into Entrez gene ids
platform.ids <- names(gene.list.3.1)
#platform.ids
#platform.ids[1:30]
test.gene.list <- gene.list.3.1[gset@featureData@data[,"Gene.ID"] != ""]
test.gene.list[1:10]
test.gene.names <- gset@featureData@data[,c("ID","Gene.ID")][gset@featureData@data[,"Gene.ID"] != "",]
test.gene.names[1:10,]
test <- matrix(test.gene.list)
gset@featureData@data[,"Gene.ID"] != ""
which(apply(gset@featureData@data[,"Gene.ID"],1,length) > 0)[1:30]
View(test)
#before passing into the enrichment functions, need to translate proprietary (platform) ids into Entrez gene ids
platform.ids <- names(gene.list.3.1)
#platform.ids
#platform.ids[1:30]
test.gene.list <- gene.list.3.1[gset@featureData@data[,"Gene.ID"] != ""]
test.gene.list[1:10]
test.gene.names <- gset@featureData@data[,c("ID","Gene.ID")][gset@featureData@data[,"Gene.ID"] != "",]
test.gene.names[1:10,]
test <- matrix(test.gene.list, dimnames = test.gene.names)
#before passing into the enrichment functions, need to translate proprietary (platform) ids into Entrez gene ids
platform.ids <- names(gene.list.3.1)
#platform.ids
#platform.ids[1:30]
test.gene.list <- gene.list.3.1[gset@featureData@data[,"Gene.ID"] != ""]
test.gene.list[1:10]
test.gene.names <- gset@featureData@data[,c("ID","Gene.ID")][gset@featureData@data[,"Gene.ID"] != "",]
test.gene.names[1:10,]
test <- matrix(test.gene.list, dimnames = test.gene.names[,1])
#before passing into the enrichment functions, need to translate proprietary (platform) ids into Entrez gene ids
platform.ids <- names(gene.list.3.1)
#platform.ids
#platform.ids[1:30]
test.gene.list <- gene.list.3.1[gset@featureData@data[,"Gene.ID"] != ""]
test.gene.list[1:10]
test.gene.names <- gset@featureData@data[,c("ID","Gene.ID")][gset@featureData@data[,"Gene.ID"] != "",2]
test.gene.names[1:10,]
#before passing into the enrichment functions, need to translate proprietary (platform) ids into Entrez gene ids
platform.ids <- names(gene.list.3.1)
#platform.ids
#platform.ids[1:30]
test.gene.list <- gene.list.3.1[gset@featureData@data[,"Gene.ID"] != ""]
test.gene.list[1:10]
test.gene.names <- gset@featureData@data[,c("ID","Gene.ID")][gset@featureData@data[,"Gene.ID"] != "",2]
test.gene.names[1:10,]
#before passing into the enrichment functions, need to translate proprietary (platform) ids into Entrez gene ids
platform.ids <- names(gene.list.3.1)
#platform.ids
#platform.ids[1:30]
test.gene.list <- gene.list.3.1[gset@featureData@data[,"Gene.ID"] != ""]
test.gene.list[1:10]
test.gene.names <- gset@featureData@data[,c("ID","Gene.ID")][gset@featureData@data[,"Gene.ID"] != "",2]
test.gene.names[1:10]
test <- matrix(test.gene.list, dimnames = test.gene.names)
#before passing into the enrichment functions, need to translate proprietary (platform) ids into Entrez gene ids
platform.ids <- names(gene.list.3.1)
#platform.ids
#platform.ids[1:30]
test.gene.list <- gene.list.3.1[gset@featureData@data[,"Gene.ID"] != ""]
test.gene.list[1:10]
test.gene.names <- gset@featureData@data[,c("ID","Gene.ID")][gset@featureData@data[,"Gene.ID"] != "",2]
test.gene.names[1:10]
typeof(test.gene.names)
test <- matrix(test.gene.list, dimnames = test.gene.names)
#before passing into the enrichment functions, need to translate proprietary (platform) ids into Entrez gene ids
platform.ids <- names(gene.list.3.1)
#platform.ids
#platform.ids[1:30]
test.gene.list <- gene.list.3.1[gset@featureData@data[,"Gene.ID"] != ""]
test.gene.list[1:10]
test.gene.names <- gset@featureData@data[,c("ID","Gene.ID")][gset@featureData@data[,"Gene.ID"] != "",2]
test.gene.names[1:10]
as.list(test.gene.names)
test <- matrix(test.gene.list, dimnames = test.gene.names)
#before passing into the enrichment functions, need to translate proprietary (platform) ids into Entrez gene ids
platform.ids <- names(gene.list.3.1)
#platform.ids
#platform.ids[1:30]
test.gene.list <- gene.list.3.1[gset@featureData@data[,"Gene.ID"] != ""]
test.gene.list[1:10]
test.gene.names <- gset@featureData@data[,c("ID","Gene.ID")][gset@featureData@data[,"Gene.ID"] != "",2]
test.gene.names[1:10]
test <- matrix(test.gene.list, dimnames = as.list(test.gene.names))
#before passing into the enrichment functions, need to translate proprietary (platform) ids into Entrez gene ids
platform.ids <- names(gene.list.3.1)
#platform.ids
#platform.ids[1:30]
test.gene.list <- gene.list.3.1[gset@featureData@data[,"Gene.ID"] != ""]
test.gene.list[1:10]
test.gene.names <- gset@featureData@data[,c("ID","Gene.ID")][gset@featureData@data[,"Gene.ID"] != "",2]
test.gene.names[1:10]
## feature 1: numeric vector
test = test.gene.list
## feature 2: named vector
names(test) = test.gene.names
## feature 3: decreasing order
#geneList = sort(geneList, decreasing = TRUE)
#test <- matrix(test.gene.list, dimnames = as.list(test.gene.names))
gset@featureData@data[,"Gene.ID"] != ""
which(apply(gset@featureData@data[,"Gene.ID"],1,length) > 0)[1:30]
#before passing into the enrichment functions, need to translate proprietary (platform) ids into Entrez gene ids
platform.ids <- names(gene.list.3.1)
#platform.ids
#platform.ids[1:30]
test.gene.list <- gene.list.3.1[gset@featureData@data[,"Gene.ID"] != ""]
test.gene.list[1:10]
test.gene.names <- gset@featureData@data[,c("ID","Gene.ID")][gset@featureData@data[,"Gene.ID"] != "",2]
test.gene.names[1:10]
## feature 1: numeric vector
test = test.gene.list
## feature 2: named vector
names(test) = test.gene.names
## feature 3: decreasing order
test = sort(test, decreasing = TRUE)
#test <- matrix(test.gene.list, dimnames = as.list(test.gene.names))
gset@featureData@data[,"Gene.ID"] != ""
which(apply(gset@featureData@data[,"Gene.ID"],1,length) > 0)[1:30]
#before passing into the enrichment functions, need to translate proprietary (platform) ids into Entrez gene ids
platform.ids <- names(gene.list.3.1)
#platform.ids
#platform.ids[1:30]
test.gene.list <- gene.list.3.1[gset@featureData@data[,"Gene.ID"] != ""]
test.gene.list[1:10]
test.gene.names <- gset@featureData@data[,c("ID","Gene.ID")][gset@featureData@data[,"Gene.ID"] != "",2]
test.gene.names[1:10]
## feature 1: numeric vector
test = test.gene.list
## feature 2: named vector
names(test) = test.gene.names
## feature 3: decreasing order
test = sort(test, decreasing = TRUE)
#gset@featureData@data[,"Gene.ID"] != ""
#which(apply(gset@featureData@data[,"Gene.ID"],1,length) > 0)[1:30]
#before passing into the enrichment functions, need to translate proprietary (platform) ids into Entrez gene ids
platform.ids <- names(gene.list.3.1)
#platform.ids
#platform.ids[1:30]
test.gene.list <- gene.list.3.1[gset@featureData@data[,"Gene.ID"] != ""]
test.gene.list[1:10]
test.gene.names <- gset@featureData@data[,c("ID","Gene.ID")][gset@featureData@data[,"Gene.ID"] != "",2]
test.gene.names[1:10]
## feature 1: numeric vector
test = test.gene.list
## feature 2: named vector
names(test) = test.gene.names
## feature 3: decreasing order
test = sort(test, decreasing = TRUE)
#gset@featureData@data[,"Gene.ID"] != ""
#which(apply(gset@featureData@data[,"Gene.ID"],1,length) > 0)[1:30]
test
#before passing into the enrichment functions, need to translate proprietary (platform) ids into Entrez gene ids
platform.ids <- names(gene.list.3.1)
#platform.ids
#platform.ids[1:30]
test.gene.list <- gene.list.3.1[gset@featureData@data[,"Gene.ID"] != ""]
test.gene.list[1:10]
test.gene.names <- gset@featureData@data[,c("ID","Gene.ID")][gset@featureData@data[,"Gene.ID"] != "",2]
test.gene.names[1:10]
## feature 1: numeric vector
test = test.gene.list
## feature 2: named vector
names(test) = test.gene.names
## feature 3: decreasing order
test = sort(test, decreasing = TRUE)
#gset@featureData@data[,"Gene.ID"] != ""
#which(apply(gset@featureData@data[,"Gene.ID"],1,length) > 0)[1:30]
test[1:30]
library(clusterProfiler)
library(org.Hs.eg.db)
gene <- names(test)[abs(test) > 2]
ggo <- groupGO(gene     = gene,
OrgDb    = org.Hs.eg.db,
ont      = "CC",
level    = 3,
readable = TRUE)
head(ggo)
#Import relevant R libraries (hide this code block in final HTML export)
suppressMessages(library(Biobase))
suppressMessages(library(GEOquery))
suppressMessages(library(limma))
#Download GEO data for GSE4170 into a table "gset". 19MB
suppressMessages(gset <- getGEO("GSE4170", GSEMatrix =TRUE, AnnotGPL=TRUE))
#Pull column names from the platform for this experiment: Rosetta/Merck Human 25k v2.2.1 microarray (GPL2029)
#getGEO returns a list of experiments. we are only interested the 1st (and only) one, so set gset = gset[[1]]
if (length(gset) > 1) idx <- grep("GPL2029", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
gset
quantile(exprs(gset), c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T)
# make proper column names to match toptable (most are ok like "ID", "GO.Function.ID". This escapes those character names just in case)
fvarLabels(gset) <- make.names(fvarLabels(gset))
# group names for all samples. 0 is control CD34, 1 is Chronic Phase, 2 is Accelerated Phase, 3 is Blast Crisis
gsms <- paste0("000000222222222222333333333333333X33333X3333233233",
"33111111111111111111111113333311111111111111111111",
"1111111111111133333")
#old: 0 is control CD34, 1 is Accelerated Phase, 2 is Blast Crisis, 5 is Chronic Phase
#gsms <- paste0("000000111111111111222222222222222X22222X2222122122",
#        "22555555555555555555555552222255555555555555555555",
#        "5555555555555522222")
sml <- c()
for (i in 1:nchar(gsms)) { sml[i] <- substr(gsms,i,i) }
# eliminate samples marked as "X"
sel <- which(sml != "X")
sml <- sml[sel]
gset <- gset[ ,sel]
# log2 transform. code provided by default by GEO2R, but I think the Radich 2006 is already log10, so this doesnt do anything to the Radich 2006 expression values. Commenting this out.
#ex <- exprs(gset)
#qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
#LogC <- (qx[5] > 100) ||
#          (qx[6]-qx[1] > 50 && qx[2] > 0) ||
#          (qx[2] > 0 && qx[2] < 1 && qx[4] > 1 && qx[4] < 2)
#if (LogC) { ex[which(ex <= 0)] <- NaN
#  exprs(gset) <- log2(ex) }
# BEN: originally, this stuff was done right before building the linear models with limma. Im moving it up here because I want to do lots of model builds, but the initial "paste(G" here kept prepending "G" to the group names in gset$description!
# set up the data and proceed with analysis. Create a category list (R-speak: "level") and assign to gset$description by user-defined group. Next, save a model.matrix where each row is a sample and each column is a flag to show membership in one of the user-defined groups.Will use this "design" model.matrix later in linear modeling block
sml <- paste("G", sml, sep="")    # set group names
fl <- as.factor(sml)
gset$description <- fl #at first, all gset$description were just "Chonic Myelogenous Leukemia". Set to G0-G5.
# ^ gset$description is the same as gset@phenoData@data (so this just relabels that column and uses the user-defined groups instead!)
design <- model.matrix(~ description + 0, gset)
colnames(design) <- levels(fl)
#phenotypes data (metadata) on the first 10 samples
pData(gset)[1:10,c("title","geo_accession","description","description.1",  "data_row_count")]
#example numeric expression data for 7 genes in each of the first 5 samples
exprs(gset)[1:7,1:5]
#build a linear model...
fit <- lmFit(gset, design)
cont.matrix <- makeContrasts(G1-G0, G2-G0, G3-G0, G3-G2, G3-G1, levels=design) #for 4 groups: 0,1,2,5.
#^I think it is here you can group Blast Crisis and Accelerated groups into one and compare vs. control group!
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=250) #sort by the lods or B-statistic
#by default, top table saves a dataframe with all columns of the gene feature data in the expression dataset.
#subset top table here down to only the columns we care about:
subset(tT, select=c("P.Value","Gene.symbol"
,"G1...G0","G2...G0","G3...G0","G3...G2","G3...G1"
,"AveExpr"))
#transpose the feature (gene) data for the GAK gene...
t(gset@featureData@data[with(gset@featureData@data,Gene.symbol=="GAK")
,c("ID","Gene.symbol","Gene.title","Chromosome.location","GO.Process")])
x = 1
#instead of having to look up IDs, just take the xth value of the TopTable...
plot(exprs(gset)[toString(tT[x,1]),] ~ fl #plot expressions for xth most differentially expressed gene
,main = paste(tT[x,"Gene.symbol"] , " (#", x, " most significantly differentially expressed gene)")
,xlab="Groups: G0 (Control), G1 (Chronic), G2 (Accelerated), G3 (Crises)",ylab=""
,sub = paste("GO Process:",tT[x,"GO.Process"]))
#exprs(gset)
#gset@phenoData@data
#gset$description
##dim(gset@assayData[["exprs"]]) #24481 x 117
#rowMeans(exprs(gset)[,which(sml=="G0")])
g1.means <- rowMeans(exprs(gset)[,which(sml=="G1")])
g3.means <- rowMeans(exprs(gset)[,which(sml=="G3")])
#create gene list
gene.list.3.1 <- 10^g3.means / 10^g1.means #raw values are all log10 transormed. undo that.
#gene.list.3.1 <- sort(gene.list.3.1, decreasing=TRUE)
gene.list.3.1 <- log(gene.list.3.1, base=2)
#before passing into the enrichment functions, need to translate proprietary (platform) ids into Entrez gene ids
platform.ids <- names(gene.list.3.1)
#platform.ids
#platform.ids[1:30]
test.gene.list <- gene.list.3.1[gset@featureData@data[,"Gene.ID"] != ""]
test.gene.list[1:10]
test.gene.names <- gset@featureData@data[,c("ID","Gene.ID")][gset@featureData@data[,"Gene.ID"] != "",2]
test.gene.names[1:10]
## feature 1: numeric vector
test = test.gene.list
## feature 2: named vector
names(test) = test.gene.names
## feature 3: decreasing order
test = sort(test, decreasing = TRUE)
#gset@featureData@data[,"Gene.ID"] != ""
#which(apply(gset@featureData@data[,"Gene.ID"],1,length) > 0)[1:30]
test[1:30]
library(clusterProfiler)
library(org.Hs.eg.db)
library(DOSE)
gene <- names(test)[abs(test) > 4]
ggo <- groupGO(gene     = gene,
OrgDb    = org.Hs.eg.db,
ont      = "CC",
level    = 3,
readable = TRUE)
head(ggo)
print(ggo
print(ggo
print(ggo)
ggo
ggo@result
gene <- names(test)[abs(test) > 3]
ggo <- groupGO(gene     = gene,
OrgDb    = org.Hs.eg.db,
ont      = "CC",
level    = 3,
readable = TRUE)
gene <- names(test)[abs(test) > 2.5]
ggo <- groupGO(gene     = gene,
